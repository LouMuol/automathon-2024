Using cuda
Training model:
torch.Size([32, 10, 3, 256, 256])
===============================================================================================
Layer (type:depth-idx)                        Output Shape              Param #
===============================================================================================
DeepfakeDetector                              [32, 3, 1]                --
├─ResNet: 1-1                                 [32, 1000]                --
│    └─Conv2d: 2-1                            [32, 64, 128, 128]        (9,408)
│    └─BatchNorm2d: 2-2                       [32, 64, 128, 128]        (128)
│    └─ReLU: 2-3                              [32, 64, 128, 128]        --
│    └─MaxPool2d: 2-4                         [32, 64, 64, 64]          --
│    └─Sequential: 2-5                        [32, 64, 64, 64]          --
│    │    └─BasicBlock: 3-1                   [32, 64, 64, 64]          (73,984)
│    │    └─BasicBlock: 3-2                   [32, 64, 64, 64]          (73,984)
│    └─Sequential: 2-6                        [32, 128, 32, 32]         --
│    │    └─BasicBlock: 3-3                   [32, 128, 32, 32]         (230,144)
│    │    └─BasicBlock: 3-4                   [32, 128, 32, 32]         (295,424)
│    └─Sequential: 2-7                        [32, 256, 16, 16]         --
│    │    └─BasicBlock: 3-5                   [32, 256, 16, 16]         (919,040)
│    │    └─BasicBlock: 3-6                   [32, 256, 16, 16]         (1,180,672)
│    └─Sequential: 2-8                        [32, 512, 8, 8]           --
│    │    └─BasicBlock: 3-7                   [32, 512, 8, 8]           (3,673,088)
│    │    └─BasicBlock: 3-8                   [32, 512, 8, 8]           (4,720,640)
│    └─SelectAdaptivePool2d: 2-9              [32, 512]                 --
│    │    └─AdaptiveAvgPool2d: 3-9            [32, 512, 1, 1]           --
│    │    └─Flatten: 3-10                     [32, 512]                 --
│    └─Linear: 2-10                           [32, 1000]                (513,000)
├─Flatten: 1-2                                [32, 1000]                --
├─Linear: 1-3                                 [32, 1]                   1,001
├─Sigmoid: 1-4                                [32, 1]                   --
├─ResNet: 1-5                                 [32, 1000]                (recursive)
│    └─Conv2d: 2-11                           [32, 64, 128, 128]        (recursive)
│    └─BatchNorm2d: 2-12                      [32, 64, 128, 128]        (recursive)
│    └─ReLU: 2-13                             [32, 64, 128, 128]        --
│    └─MaxPool2d: 2-14                        [32, 64, 64, 64]          --
│    └─Sequential: 2-15                       [32, 64, 64, 64]          (recursive)
│    │    └─BasicBlock: 3-11                  [32, 64, 64, 64]          (recursive)
│    │    └─BasicBlock: 3-12                  [32, 64, 64, 64]          (recursive)
│    └─Sequential: 2-16                       [32, 128, 32, 32]         (recursive)
│    │    └─BasicBlock: 3-13                  [32, 128, 32, 32]         (recursive)
│    │    └─BasicBlock: 3-14                  [32, 128, 32, 32]         (recursive)
│    └─Sequential: 2-17                       [32, 256, 16, 16]         (recursive)
│    │    └─BasicBlock: 3-15                  [32, 256, 16, 16]         (recursive)
│    │    └─BasicBlock: 3-16                  [32, 256, 16, 16]         (recursive)
│    └─Sequential: 2-18                       [32, 512, 8, 8]           (recursive)
│    │    └─BasicBlock: 3-17                  [32, 512, 8, 8]           (recursive)
│    │    └─BasicBlock: 3-18                  [32, 512, 8, 8]           (recursive)
│    └─SelectAdaptivePool2d: 2-19             [32, 512]                 --
│    │    └─AdaptiveAvgPool2d: 3-19           [32, 512, 1, 1]           --
│    │    └─Flatten: 3-20                     [32, 512]                 --
│    └─Linear: 2-20                           [32, 1000]                (recursive)
├─Flatten: 1-6                                [32, 1000]                --
├─Linear: 1-7                                 [32, 1]                   (recursive)
├─Sigmoid: 1-8                                [32, 1]                   --
├─ResNet: 1-9                                 [32, 1000]                (recursive)
│    └─Conv2d: 2-21                           [32, 64, 128, 128]        (recursive)
│    └─BatchNorm2d: 2-22                      [32, 64, 128, 128]        (recursive)
│    └─ReLU: 2-23                             [32, 64, 128, 128]        --
│    └─MaxPool2d: 2-24                        [32, 64, 64, 64]          --
│    └─Sequential: 2-25                       [32, 64, 64, 64]          (recursive)
│    │    └─BasicBlock: 3-21                  [32, 64, 64, 64]          (recursive)
│    │    └─BasicBlock: 3-22                  [32, 64, 64, 64]          (recursive)
│    └─Sequential: 2-26                       [32, 128, 32, 32]         (recursive)
│    │    └─BasicBlock: 3-23                  [32, 128, 32, 32]         (recursive)
│    │    └─BasicBlock: 3-24                  [32, 128, 32, 32]         (recursive)
│    └─Sequential: 2-27                       [32, 256, 16, 16]         (recursive)
│    │    └─BasicBlock: 3-25                  [32, 256, 16, 16]         (recursive)
│    │    └─BasicBlock: 3-26                  [32, 256, 16, 16]         (recursive)
│    └─Sequential: 2-28                       [32, 512, 8, 8]           (recursive)
│    │    └─BasicBlock: 3-27                  [32, 512, 8, 8]           (recursive)
│    │    └─BasicBlock: 3-28                  [32, 512, 8, 8]           (recursive)
│    └─SelectAdaptivePool2d: 2-29             [32, 512]                 --
│    │    └─AdaptiveAvgPool2d: 3-29           [32, 512, 1, 1]           --
│    │    └─Flatten: 3-30                     [32, 512]                 --
│    └─Linear: 2-30                           [32, 1000]                (recursive)
├─Flatten: 1-10                               [32, 1000]                --
├─Linear: 1-11                                [32, 1]                   (recursive)
├─Sigmoid: 1-12                               [32, 1]                   --
===============================================================================================
Total params: 11,690,513
Trainable params: 1,001
Non-trainable params: 11,689,512
Total mult-adds (G): 227.45
===============================================================================================
Input size (MB): 251.66
Forward/backward pass size (MB): 4983.60
Params size (MB): 46.76
Estimated Total Size (MB): 5282.02
===============================================================================================
Training...
Epoch 0
  0%|          | 0/310 [00:00<?, ?it/s]/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([32, 10, 1])) that is different to the input size (torch.Size([32, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
  0%|          | 0/310 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/raid/home/automathon_2024/account13/anon/automathon-2024/run.py", line 300, in <module>
    loss = loss_fn(label, label_pred)
  File "/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/nn/modules/loss.py", line 535, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/nn/functional.py", line 3365, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/raid/home/automathon_2024/account13/.local/lib/python3.10/site-packages/torch/functional.py", line 76, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (32) must match the size of tensor b (10) at non-singleton dimension 1